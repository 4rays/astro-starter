---
import {getLangFromParams} from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import {Button} from "@/components/primitives/button";
import {Input} from "@/components/primitives/input";
import PasswordField from "@/components/PasswordField.svelte";
import Mail from "@/assets/mail.svg";
import {createAuth} from "@/lib/auth";
import type {APIError} from "better-auth/api";
import {useTranslationsFromParams} from "@/i18n/utils";

const t = useTranslationsFromParams(Astro.params);
const lang = getLangFromParams(Astro.params);

if (!Astro.locals.user?.id) return Astro.redirect(`/${lang}/sign-in`);
if (!Astro.locals.user.emailVerified)
  return Astro.redirect(`/${lang}/verify-email`);

const errors = {
  name: "",
  email: "",
  currentPassword: "",
  newPassword: ""
};

const fields = {
  name: Astro.locals.user.name || "",
  email: Astro.locals.user.email,
  currentPassword: "",
  newPassword: ""
};

if (Astro.request.method === "POST") {
  const auth = createAuth(Astro.locals.runtime.env);
  const formData = await Astro.request.formData();
  const action = formData.get("action") as string;

  if (action === "update-profile") {
    const name = formData.get("name") as string;
    fields.name = name;

    try {
      await auth.api.updateUser({
        body: {name},
        headers: Astro.request.headers
      });
      return Astro.redirect(`/${lang}/account?success=profile-updated`);
    } catch (error) {
      console.error(error);
      errors.name = t.account.updateFailed;
    }
  }

  if (action === "change-email") {
    const email = formData.get("email") as string;
    fields.email = email;

    try {
      const {status} = await auth.api.changeEmail({
        body: {
          newEmail: email,
          callbackURL: `/${lang}/account`
        },
        headers: Astro.request.headers
      });

      if (!status) {
        errors.email = t.account.updateFailed;
      }

      return Astro.redirect(`/${lang}/account?success=email-verification-sent`);
    } catch (error) {
      console.error(error);
      errors.email = t.account.updateFailed;
    }
  }

  if (action === "change-password") {
    const currentPassword = formData.get("currentPassword") as string;
    const newPassword = formData.get("newPassword") as string;

    fields.currentPassword = currentPassword;
    fields.newPassword = newPassword;

    try {
      await auth.api.changePassword({
        body: {
          currentPassword,
          newPassword,
          revokeOtherSessions: true
        },
        headers: Astro.request.headers
      });
      return Astro.redirect(`/${lang}/account?success=password-changed`);
    } catch (error) {
      const apiError = error as APIError;
      if (apiError.body?.code === "PASSWORD_TOO_SHORT") {
        errors.newPassword = "New password must be at least 8 characters long";
      } else if (apiError.body?.code === "INVALID_PASSWORD") {
        errors.currentPassword = "Current password is incorrect";
      } else {
        errors.currentPassword = t.account.updateFailed;
      }
    }
  }
}

const success = Astro.url.searchParams.get("success");
---

<Layout>
  <div class="flex flex-col items-center justify-center w-full py-12">
    <div class="w-full max-w-md space-y-8">
      <h1 class="text-2xl font-bold mb-8">{t.account.personalInfo}</h1>

      {
        success === "profile-updated" && (
          <div class="bg-green-50 dark:bg-green-950 text-green-700 dark:text-green-300 p-4 rounded-md mb-4">
            {t.account.profileUpdated}
          </div>
        )
      }

      {
        success === "email-verification-sent" && (
          <div class="bg-green-50 dark:bg-green-950 text-green-700 dark:text-green-300 p-4 rounded-md mb-4">
            {t.auth.checkEmail}
          </div>
        )
      }

      {
        success === "password-changed" && (
          <div class="bg-green-50 dark:bg-green-950 text-green-700 dark:text-green-300 p-4 rounded-md mb-4">
            {t.auth.resetSuccess}
          </div>
        )
      }

      <div class="bg-card p-6 rounded-lg border">
        <h2 class="text-xl font-semibold mb-4">{t.account.editProfile}</h2>
        <form method="POST" class="space-y-4">
          <input type="hidden" name="action" value="update-profile" />
          {
            errors.name && (
              <div class="bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 p-4 rounded-md mb-4">
                {errors.name}
              </div>
            )
          }
          <div
            class="relative flex items-center rounded-md border focus-within:ring-1 focus-within:ring-ring px-2"
          >
            <Input
              type="text"
              placeholder={t.account.name}
              class="border-0 focus-visible:ring-0 shadow-none bg-transparent dark:bg-transparent"
              name="name"
              required
              value={fields.name}
            />
          </div>
          <Button type="submit" class="w-full">
            {t.account.update}
          </Button>
        </form>
      </div>

      <div class="bg-card p-6 rounded-lg border">
        <h2 class="text-xl font-semibold mb-4">{t.account.email}</h2>
        <form method="POST" class="space-y-4">
          <input type="hidden" name="action" value="change-email" />
          {
            errors.email && (
              <div class="bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 p-4 rounded-md mb-4">
                {errors.email}
              </div>
            )
          }
          <div
            class="relative flex items-center rounded-md border focus-within:ring-1 focus-within:ring-ring pl-2"
          >
            <Mail class="h-5 w-5 text-muted-foreground mr-1" />
            <Input
              type="email"
              placeholder={t.account.email}
              class="border-0 focus-visible:ring-0 shadow-none bg-transparent dark:bg-transparent"
              name="email"
              required
              value={fields.email}
            />
          </div>
          <Button type="submit" class="w-full">
            {t.account.update}
          </Button>
        </form>
      </div>

      <div class="bg-card p-6 rounded-lg border">
        <h2 class="text-xl font-semibold mb-4">{t.auth.password}</h2>
        <form method="POST" class="space-y-6">
          <input type="hidden" name="action" value="change-password" />
          {
            (errors.currentPassword || errors.newPassword) && (
              <div class="bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 p-4 rounded-md mb-4">
                {errors.currentPassword || errors.newPassword}
              </div>
            )
          }
          <PasswordField
            name="currentPassword"
            className="mb-2"
            placeholder={t.auth.password}
            required
            client:load
            value={fields.currentPassword}
          />
          <PasswordField
            className="mb-2"
            name="newPassword"
            placeholder={t.auth.newPassword}
            required
            client:load
            value={fields.newPassword}
          />
          <Button type="submit" class="w-full">
            {t.account.update}
          </Button>
        </form>
      </div>
    </div>
  </div>
</Layout>
