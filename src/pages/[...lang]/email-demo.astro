---
import {useTranslationsFromParams} from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";

const t = useTranslationsFromParams(Astro.params);
---

<Layout title={`${t.email.demo} | Astro Starter`}>
  <div class="mx-auto max-w-4xl px-6 py-8 pt-12">
    <h1 class="text-foreground mb-8 text-2xl font-bold">{t.email.demo}</h1>

    <div class="grid grid-cols-1 gap-8 md:grid-cols-2">
      <div class="bg-card border-border rounded-lg border p-6 shadow-sm">
        <form class="space-y-4" id="send-custom-email">
          <h2 class="mb-4 text-xl font-semibold">{t.email.sendCustom}</h2>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="send-email__recipient">{t.auth.email}</label
            >
            <input
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="send-email__recipient"
              name="recipient"
              required
              type="email"
            />
          </div>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="send-email__subject">{t.email.subject}</label
            >
            <input
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="send-email__subject"
              name="subject"
              required
              type="text"
            />
          </div>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="send-email__title">{t.email.emailTitle}</label
            >
            <input
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="send-email__title"
              name="title"
              placeholder="Astro Starter"
              type="text"
            />
          </div>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="send-email__message">{t.email.message}</label
            >
            <textarea
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="send-email__message"
              name="message"
              required
              rows="5"></textarea>
          </div>
          <button
            class="ring-offset-background focus-visible:ring-ring bg-primary text-primary-foreground hover:bg-primary/90 inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50"
            type="submit"
          >
            {t.email.sendCustom}
          </button>
        </form>
      </div>

      <div class="bg-card border-border rounded-lg border p-6 shadow-sm">
        <form class="space-y-4" id="send-welcome-email">
          <h2 class="mb-4 text-xl font-semibold">{t.email.sendWelcome}</h2>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="welcome-email__recipient">{t.auth.email}</label
            >
            <input
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="welcome-email__recipient"
              name="recipient"
              required
              type="email"
            />
          </div>
          <div>
            <label
              class="mb-1 block text-sm font-medium"
              for="welcome-email__name">{t.auth.name}</label
            >
            <input
              class="border-input bg-background w-full rounded-md border px-3 py-2"
              id="welcome-email__name"
              name="name"
              required
              type="text"
            />
          </div>
          <button></button>
          <button
            class="ring-offset-background focus-visible:ring-ring bg-primary text-primary-foreground hover:bg-primary/90 inline-flex h-10 items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50"
            type="submit"
          >
            {t.email.sendWelcome}
          </button>
        </form>
      </div>
    </div>

    {
      Astro.url.searchParams.get("sent") === "true" && (
        <div class="bg-muted text-foreground border-border mt-8 rounded-md border p-4">
          <p class="font-medium">âœ… {t.email.success}</p>
          <p class="text-muted-foreground mt-1 text-sm">
            {t.email.consoleInfo}
          </p>
        </div>
      )
    }

    <div class="bg-muted border-border mt-8 rounded-md border p-4">
      <h3 class="mb-2 font-semibold">{t.email.setupTitle}</h3>
      <p class="text-muted-foreground mb-4">
        {t.email.setupDescription}
      </p>
      <pre
        class="bg-card border-border overflow-x-auto rounded-md border p-3">
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_FROM=Your App &lt;noreply@yourdomain.com&gt;
      </pre>
      <p class="text-muted-foreground mt-4">
        {t.email.templateInfo}
      </p>
      <p class="text-muted-foreground mt-2">
        {t.email.devInfo}
      </p>
    </div>
  </div>
</Layout>

<script>
  import {actions} from "astro:actions";
  import {navigate} from "astro:transitions/client";

  const pathSegments = window.location.pathname.split("/").filter(Boolean);
  const lang =
    pathSegments[0] === "en" || pathSegments[0] === "ja"
      ? pathSegments[0]
      : "en";

  const sendCustomEmailForm = document.querySelector("#send-custom-email");
  sendCustomEmailForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    if (sendCustomEmailForm instanceof HTMLFormElement) {
      const formData = new FormData(sendCustomEmailForm);

      const email = formData.get("recipient") as string;
      const subject = formData.get("subject") as string;
      const html = formData.get("message") as string;

      const {error} = await actions.email.sendCustomEmail({
        email,
        subject,
        html
      });
      if (!error) navigate(`/${lang}/email-demo?sent=true`);
    }
  });

  const sendWelcomeEmailForm = document.querySelector("#send-welcome-email");
  sendWelcomeEmailForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    if (sendWelcomeEmailForm instanceof HTMLFormElement) {
      const formData = new FormData(sendWelcomeEmailForm);
      const {error} = await actions.email.sendWelcomeEmail({
        email: formData.get("recipient") as string,
        name: formData.get("name") as string
      });
      if (!error) navigate(`/${lang}/email-demo?sent=true`);
    }
  });
</script>
